#### Most of the dockerfile is taken from 
#### https://github.com/matifali/dockerdl

# Build argumnets
# H100 need CUDA >= 11.8,
ARG CUDA_VER=12.6.3
ARG UBUNTU_VER=22.04

# Download the base image
FROM nvidia/cuda:${CUDA_VER}-cudnn-devel-ubuntu${UBUNTU_VER}
# you can check for all available images at https://hub.docker.com/r/nvidia/cuda/tags

# Python version
ARG PYTHON_VER=3.10

# Install as root
USER root

# Shell
SHELL ["/bin/bash", "--login", "-o", "pipefail", "-c"]

ARG DEBIAN_FRONTEND="noninteractive"

# Install dependencies
RUN apt-get update && apt-get upgrade -y && \
    DEBIAN_FRONTEND=noninteractive TZ=Asia/Tokyo apt-get install -y --no-install-recommends \
    bash \
    bash-completion \
    ca-certificates \
    curl \
    git \
    byobu \
    software-properties-common \
    ffmpeg \
    htop \
    openssh-client \
    openssh-server \
    sudo \
    unzip \
    vim \
    wget \
    libgl1-mesa-glx \
    zip && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN add-apt-repository ppa:deadsnakes/ppa && apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
    python${PYTHON_VER} \
    python${PYTHON_VER}-dev \
    python${PYTHON_VER}-venv \
    python${PYTHON_VER}-distutils \
    python3-apt && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VER} 2 && \
    update-alternatives --set python3 /usr/bin/python${PYTHON_VER}


ARG USERNAME=user
ARG USERID=1000
ARG GROUPID=1000

# Add a user `${USERNAME}` so that you're not developing as the `root` user
RUN groupadd -g ${GROUPID} ${USERNAME} && \
    useradd ${USERNAME} \
    --create-home \
    --uid ${USERID} \
    --gid ${GROUPID} \
    --shell=/bin/bash && \
    echo "${USERNAME} ALL=(ALL) NOPASSWD:ALL" >>/etc/sudoers.d/nopasswd

# Change to your user
USER ${USERNAME}

# Install pip. If you use python-pip might get error because old version
# See https://stackoverflow.com/questions/70431655/importerror-cannot-import-name-html5lib-from-pip-vendor-usr-lib-python3
RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python${PYTHON_VER}

ARG HOME=/home/${USERNAME}
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
ENV PATH=$HOME/.local/bin:$PATH

# Install Python packages
WORKDIR /home/${USERNAME}
RUN pip install --upgrade --no-cache-dir pip && \
    pip install --no-cache-dir \
        git+https://github.com/motional/nuplan-devkit/@nuplan-devkit-v1.2 \
        scikit-learn==1.5.0 \
        positional-encodings==6.0.1 \
        aioboto3 \
        aiofiles \
        bokeh==2.4.3 \
        casadi \
        control==0.9.1 \
        Fiona \
        geopandas>=0.12.1 \
        guppy3==3.1.2 \
        hydra-core==1.2.0 \
        joblib \
        matplotlib \
        nest_asyncio \
        numpy==1.23.4 \
        opencv-python==4.9.0.80 \
        pandas \
        Pillow>=10.4.0 \
        psutil \
        pyarrow \
        pyinstrument \
        pyogrio \
        pyquaternion>=0.9.5 \
        pytest \
        rasterio \
        ray \
        retry \
        rtree \
        scipy \
        selenium \
        setuptools==78.1.1 \
        Shapely>=2.0.0 \
        SQLAlchemy==1.4.27 \
        sympy \
        tornado>=6.4.2 \
        tqdm \
        ujson \
        torch==2.7.1 \
        torchvision==0.22.1 \
        pytorch-lightning==2.4.0 \
        tensorboard==2.16.2 \
        protobuf==4.25.8 \
        notebook>=7.3.2 \
        timm \
        diffusers \
        einops && \
    pip cache purge && \
    # Set path of python packages
    echo "# Set path of python packages" >>${HOME}/.bashrc && \
    echo 'export PATH=$HOME/.local/bin:$PATH' >>${HOME}/.bashrc

WORKDIR /workspace
ENTRYPOINT [ "/bin/bash" ] 
